{"version":3,"sources":["../../src/models/User.js"],"names":["dotenv","config","schema","mongoose","Schema","id","type","String","pw","mlanghkuId","mlanghkuPw","email","default","createdAt","Date","User","module","exports","model","getProfilesByUsers","users","err","data","profile","profiles","profilesId","i","length","Profile","findOne","belongTo","_id","supervisingSchools","School","getByUser","_doc","getByType","usersId","find","console","log","getUserAndProfile","user","resetPassword","cb","info","randomPassword","randomString","generate","mailOptions","from","process","env","EMAIL_ID","to","subject","html","transporter","sendMail","set","save","aquireNewAccountByAppAccount","appUser","appPw","username","existUser","newUser","identity","create","newProfile","acquireNewAccountByCode","code","codeType","result","exist","Course","codeExist","joinCourse","userId","joinSchool","acquireNewAccount","defaultId","substring","lastIndexOf","nodemailer","createTransport","service","auth","GMAIL_ID","pass","GMAIL_PW","charset"],"mappings":"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","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport nodemailer from 'nodemailer';\r\nimport to from'../to';\r\nimport dotenv from'dotenv';\r\ndotenv.config();\r\n\r\nimport School from './School';\r\nimport Course from './Course';\r\nimport Profile from './Profile';\r\n\r\nvar schema = mongoose.Schema({\r\n  id: {\r\n    type: String\r\n  },\r\n  pw: {\r\n    type: String\r\n  },\r\n  mlanghkuId: {\r\n    type: String\r\n  },\r\n  mlanghkuPw: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'student'\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  }\r\n})\r\n\r\nvar User = module.exports = mongoose.model('user',schema);\r\n\r\nmodule.exports.getProfilesByUsers = async (users)=>{\r\n  let err,data;\r\n\r\n  let profile = [];\r\n  let profiles = [];\r\n  let profilesId = [];\r\n\r\n  for(var i=0;i<users.length;i++){\r\n    [err, profile] = await to(Profile.findOne({ belongTo: users[i]._id }) );\r\n\r\n    if(users[i].type === 'admin'){\r\n      let supervisingSchools = [];\r\n      [err, data, supervisingSchools] = await School.getByUser(users[i], profile);\r\n      profile = {...profile._doc, supervisingSchools: supervisingSchools};\r\n    }\r\n    profiles = [...profiles, profile];\r\n    profilesId = [...profilesId, profile._id];\r\n  }\r\n  return [err, profiles, profilesId];\r\n}\r\n\r\nmodule.exports.getByType = async (type)=>{\r\n  let err, users;\r\n  let usersId = [];\r\n\r\n  [err, users] = await to(User.find({type: type}));\r\n  if(err || !users){ console.log(err); return ['error']; }\r\n  for(var i=0;i<users.length;i++){\r\n    usersId = [...usersId, users[i]._id];\r\n  }\r\n  return [null , users, usersId]\r\n}\r\n\r\nmodule.exports.getUserAndProfile = async (id, pw) =>{\r\n  let err, user, profile;\r\n\r\n  [err, user] = await to(User.findOne({id, pw}));\r\n  if(err || !user){ return ['error']; }\r\n\r\n  [err, profile] = await to(Profile.findOne({belongTo: user._id}));\r\n  if(err || !profile){ return ['error']; }\r\n\r\n  return [null , user, profile]\r\n}\r\n\r\nmodule.exports.resetPassword = async (email, cb)=>{\r\n  let err, user, info;\r\n\r\n  [err,user] = await to(User.findOne({email: email}));\r\n  if(err || user === null){ cb('failed'); return; };\r\n\r\n  const randomPassword = randomString.generate(6);\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: email,\r\n      subject: 'Your mlang account password has been reset!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  user.id + '</p>' +\r\n      '<p>and your new password is <b>' + randomPassword + '</b>.</p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>'+\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log('err: mail cannot be sent'); return; }\r\n\r\n  user.set({ pw: randomPassword });\r\n  user.save();\r\n  cb('success');\r\n}\r\n\r\nmodule.exports.aquireNewAccountByAppAccount = async (appUser, appPw)=>{\r\n\r\n  const existUser = await User.findOne({id: appUser.username, pw: appPw});\r\n  if(existUser !== null){ return ['error'] }\r\n\r\n  let err, user, profile;\r\n\r\n  const newUser = {\r\n    id: appUser.username,\r\n    pw: appPw,\r\n    mlanghkuId: appUser.username,\r\n    mlanghkuPw: appPw,\r\n    email: appUser.email,\r\n    type: appUser.identity === 2? 'teacher': 'student'\r\n  };\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ console.log('cant create user'); return ['error'] }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ console.log('cant create profile'); return ['error'] }\r\n\r\n  return [null, user, profile];\r\n}\r\n\r\nmodule.exports.acquireNewAccountByCode = async (code, codeType, cb)=>{\r\n  let err, result, exist, user, profile;\r\n\r\n  if(codeType === 'course'){\r\n    [err, exist] = await to(Course.codeExist(code));\r\n  }else{\r\n    [err, exist] = await to(School.codeExist(code));\r\n  }\r\n\r\n  if(err || !exist){ console.log('no such course'); cb('failed'); return; }\r\n\r\n\r\n  const newUser = {\r\n    id: 'DefaultId',\r\n    pw: randomPassword(),\r\n    email: '@',\r\n    type: codeType === 'course'? 'student': 'teacher'\r\n  };\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ console.log('cant create user'); cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ console.log('cant create profile'); cb('failed'); console.log(err); return; }\r\n\r\n  if(codeType === 'course'){\r\n    Course.joinCourse({ userId: user._id, code: code}, (result)=>{\r\n      cb(result, user);\r\n    });\r\n  }else if(codeType === 'school'){\r\n    School.joinSchool({ userId: user._id, code: code}, (result)=>{\r\n      cb(result, user);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports.acquireNewAccount = async (email, cb)=>{\r\n  const existUser = await User.findOne({email: email});\r\n  if(existUser !== null){ cb('failed'); return; }\r\n\r\n  var defaultId = email.substring(0, email.lastIndexOf(\"@\"));\r\n  const newUser = {\r\n    id: defaultId,\r\n    pw: randomPassword(),\r\n    email: email\r\n  }\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: email,\r\n      subject: 'Your mlang account is ready!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  newUser.id + '</p>' +\r\n      '<p>and your password is <b>' + randomPassword + '</b></p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>' +\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  let err, info, user, profile;\r\n\r\n  /*[err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log(err); console.log('err: mail cannot be sent'); return; }*/\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n  cb('success');\r\n}\r\n\r\n//console.log(process.env.GMAIL_ID);\r\n//console.log(process.env.GMAIL_PW);\r\n\r\nvar transporter = nodemailer.createTransport({\r\n service: 'gmail',\r\n auth: {\r\n     user: process.env.GMAIL_ID,\r\n     pass: process.env.GMAIL_PW\r\n    }\r\n});\r\n\r\nfunction randomPassword(){\r\n  return randomString.generate({\r\n    length: 6,\r\n    charset: 'abcdefghjkmnopqrstuvwxyz234567890'\r\n  });\r\n}\r\n\r\n/*const transporter = nodemailer.createTransport({\r\n    host: process.env.HOST,\r\n    port: 465,\r\n    secure: true,\r\n    //requireTLS: true,\r\n    auth: {\r\n        user: process.env.EMAIL_ID,\r\n        pass: process.env.EMAIL_PW\r\n    }\r\n});*/\r\n"]}