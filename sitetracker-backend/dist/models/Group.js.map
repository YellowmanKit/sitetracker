{"version":3,"sources":["../../src/models/Group.js"],"names":["ObjectId","mongoose","Schema","Types","groupSchema","name","type","String","project","required","members","leader","code","createdAt","Date","default","Group","module","exports","model","fetchData","group","cb","err","data","groupData","_id","profiles","Profile","find","belongTo","studentProjects","StudentProject","student","cards","i","length","Card","langs","j","Lang","leaveGroup","findOneAndUpdate","groupCode","$pull","userId","new","joinGroup","$addToSet","addGroup","newCode","randomString","generate","charset","findOne","projectId","console","log","create","groupName","getByProjects","projectsId","groupsId","groups","getByUserAndProjects"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAIA,WAAWC,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBH,QAArC;AACA,IAAII,cAAcH,mBAASC,MAAT,CAAgB;AAChCG,QAAM;AACJC,UAAMC;AADF,GAD0B;AAIhCC,WAAS;AACPF,UAAMN,QADC;AAEPS,cAAU;AAFH,GAJuB;AAQhCC,WAAS,CAACV,QAAD,CARuB;AAShCW,UAAQ;AACNL,UAAMN;AADA,GATwB;AAYhCY,QAAM;AACJN,UAAMC,MADF;AAEJE,cAAU;AAFN,GAZ0B;AAgBhCI,aAAW;AACTP,UAAMQ,IADG;AAETC,aAAS,IAAID,IAAJ;AAFA;AAhBqB,CAAhB,CAAlB;;AAsBA,IAAIE,QAAQC,OAAOC,OAAP,GAAiBjB,mBAASkB,KAAT,CAAe,OAAf,EAAwBf,WAAxB,CAA7B;;AAIAa,OAAOC,OAAP,CAAeE,SAAf;AAAA,qEAA2B,iBAAOC,KAAP,EAAcC,EAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAErBC,eAFqB,WAEhBC,IAFgB;AAGrBC,qBAHqB,GAGT,EAAEJ,OAAOA,MAAMK,GAAf,EAHS;AAKrBC,oBALqB,GAKV,EALU;AAAA;AAAA,mBAML,kBAAGC,kBAAQC,IAAR,CAAa,EAAEC,UAAUT,MAAMX,OAAlB,EAAb,CAAH,CANK;;AAAA;AAAA;AAAA;AAMxBa,eANwB;AAMnBC,gBANmB;;AAAA,kBAOtBD,OAAO,CAACC,IAPc;AAAA;AAAA;AAAA;;AAOPF,eAAG,QAAH,EAPO;;AAAA;AASrBS,2BATqB,GASH,EATG;AAUnBrB,mBAVmB,GAUTW,MAAMX,OAVG;AAAA;AAAA,mBAWL,kBAAGsB,yBAAeH,IAAf,CAAoB,EAAErB,SAASa,MAAMb,OAAjB,EAA0ByB,SAASZ,MAAMX,OAAzC,EAApB,CAAH,CAXK;;AAAA;AAAA;AAAA;AAWxBa,eAXwB;AAWnBC,gBAXmB;;AAAA,kBAYtBD,OAAO,CAACC,IAZc;AAAA;AAAA;AAAA;;AAYPF,eAAG,QAAH,EAZO;;AAAA;;AAczBS,2DAAsBA,eAAtB,sBAA0CP,IAA1C;;AAEIU,iBAhBqB,GAgBb,EAhBa;AAiBjBC,aAjBiB,GAiBf,CAjBe;;AAAA;AAAA,kBAiBbA,IAAEJ,gBAAgBK,MAjBL;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBH,kBAAGC,eAAKR,IAAL,CAAU,EAACH,KAAKK,gBAAgBI,CAAhB,EAAmBD,KAAzB,EAAV,CAAH,CAlBG;;AAAA;AAAA;AAAA;AAkBtBX,eAlBsB;AAkBjBC,gBAlBiB;;AAAA,kBAmBpBD,OAAO,CAACC,IAnBY;AAAA;AAAA;AAAA;;AAmBLF,eAAG,QAAH,EAnBK;;AAAA;AAoBvBY,iDAAYA,KAAZ,sBAAsBV,IAAtB;;AApBuB;AAiBYW,eAjBZ;AAAA;AAAA;;AAAA;AAuBrBG,iBAvBqB,GAuBb,EAvBa;AAwBjBC,aAxBiB,GAwBf,CAxBe;;AAAA;AAAA,kBAwBbA,IAAEL,MAAME,MAxBK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyBH,kBAAGI,eAAKX,IAAL,CAAU,EAACH,KAAKQ,MAAMK,CAAN,EAASD,KAAf,EAAV,CAAH,CAzBG;;AAAA;AAAA;AAAA;AAyBtBf,eAzBsB;AAyBjBC,gBAzBiB;;AAAA,kBA0BpBD,OAAO,CAACC,IA1BY;AAAA;AAAA;AAAA;;AA0BLF,eAAG,QAAH,EA1BK;;AAAA;AA2BvBgB,iDAAYA,KAAZ,sBAAsBd,IAAtB;;AA3BuB;AAwBEe,eAxBF;AAAA;AAAA;;AAAA;;AA8BzBjB,eAAG,SAAH,EAAcG,SAAd,EAAyBE,QAAzB,EAAmCI,eAAnC,EAAoDG,KAApD,EAA2DI,KAA3D;;AA9ByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAkCArB,OAAOC,OAAP,CAAeuB,UAAf;AAAA,uEAA4B,kBAAOjB,IAAP,EAAaF,EAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBC,eADsB,WACjBF,KADiB;AAAA;AAAA,mBAGL,kBAAGL,MAAM0B,gBAAN,CAAuB,EAAC9B,MAAMY,KAAKmB,SAAZ,EAAvB,EACtB,EAACC,OAAM,EAAElC,SAASc,KAAKqB,MAAhB,EAAP,EADsB,EACY,EAAEC,KAAK,IAAP,EADZ,CAAH,CAHK;;AAAA;AAAA;AAAA;AAGzBvB,eAHyB;AAGpBF,iBAHoB;;AAAA,kBAKvB,CAACE,GAAD,IAAQF,UAAU,IALK;AAAA;AAAA;AAAA;;AAKEC,eAAG,QAAH,EALF;;AAAA;AAKyB;;AAEnD;AACAA,eAAG,SAAH,EAAcD,KAAd;;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAWAJ,OAAOC,OAAP,CAAe6B,SAAf;AAAA,uEAA2B,kBAAOvB,IAAP,EAAaF,EAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBC,eADqB,WAChBF,KADgB;AAAA;AAAA,mBAGJ,kBAAGL,MAAM0B,gBAAN,CAAuB,EAAC9B,MAAMY,KAAKmB,SAAZ,EAAvB,EACtB,EAACK,WAAU,EAAEtC,SAASc,KAAKqB,MAAhB,EAAX,EADsB,EACgB,EAAEC,KAAK,IAAP,EADhB,CAAH,CAHI;;AAAA;AAAA;AAAA;AAGxBvB,eAHwB;AAGnBF,iBAHmB;;AAAA,kBAKtB,CAACE,GAAD,IAAQF,UAAU,IALI;AAAA;AAAA;AAAA;;AAKGC,eAAG,QAAH,EALH;;AAAA;AAK0B;;AAEnD;AACAA,eAAG,SAAH,EAAcD,KAAd;;AARyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAWAJ,OAAOC,OAAP,CAAe+B,QAAf;AAAA,uEAA0B,kBAAOzB,IAAP,EAAaF,EAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBC,eADoB,WACfF,KADe;AAGpB6B,mBAHoB,GAGV,EAHU;AAIhBf,aAJgB,GAId,CAJc;;AAAA;AAAA,kBAIZA,IAAE,EAJU;AAAA;AAAA;AAAA;;AAKtBe,sBAAUC,uBAAaC,QAAb,CAAsB;AAC9BhB,sBAAQ,CADsB;AAE9BiB,uBAAS;AAFqB,aAAtB,CAAV;;AALsB;AAAA,mBAUD,kBAAGrC,MAAMsC,OAAN,CAAc,EAAC1C,MAAMsC,OAAP,EAAd,CAAH,CAVC;;AAAA;AAAA;AAAA;AAUrB3B,eAVqB;AAUhBF,iBAVgB;;AAAA,kBAWnB,CAACE,GAAD,IAAQF,UAAU,IAXC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWc;;AAXd;AAIPc,eAJO;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAcH,kBAAGnB,MAAMsC,OAAN,CAAc,EAAC9C,SAASgB,KAAK+B,SAAf,EAA0B5C,QAAQa,KAAKqB,MAAvC,EAAd,CAAH,CAdG;;AAAA;AAAA;AAAA;AAcvBtB,eAduB;AAclBF,iBAdkB;;AAAA,kBAerBA,UAAU,IAfW;AAAA;AAAA;AAAA;;AAeJC,eAAG,QAAH,EAAa,IAAb,EAAmBD,KAAnB,EAA2BmC,QAAQC,GAAR,CAAY,eAAZ,EAfvB;;AAAA;AAe8D;;AAf9D;AAAA,mBAiBH,kBAAGzC,MAAM0C,MAAN,CAAa,EAAErD,MAAMmB,KAAKmC,SAAb,EAAwBnD,SAASgB,KAAK+B,SAAtC,EAAiD7C,SAAS,CAACc,KAAKqB,MAAN,CAA1D,EAAyElC,QAAQa,KAAKqB,MAAtF,EAA8FjC,MAAMsC,OAApG,EAAb,CAAH,CAjBG;;AAAA;AAAA;AAAA;AAiBvB3B,eAjBuB;AAiBlBF,iBAjBkB;;AAAA,iBAkBrBE,GAlBqB;AAAA;AAAA;AAAA;;AAkBfD,eAAG,QAAH,EAAckC,QAAQC,GAAR,CAAYlC,GAAZ,EAlBC;;AAAA;;AAoBxB;AACAD,eAAG,SAAH,EAAcD,KAAd;;AArBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAwBAJ,OAAOC,OAAP,CAAe0C,aAAf;AAAA,uEAA+B,kBAAOC,UAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBtC,eADyB,WACpBC,IADoB;AAEzBsC,oBAFyB,GAEd,EAFc;AAGzBC,kBAHyB,GAGhB,EAHgB;AAKrB5B,aALqB,GAKnB,CALmB;;AAAA;AAAA,kBAKjBA,IAAE0B,WAAWzB,MALI;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMP,kBAAGpB,MAAMa,IAAN,CAAW,EAAErB,SAASqD,WAAW1B,CAAX,CAAX,EAAX,CAAH,CANO;;AAAA;AAAA;AAAA;AAM1BZ,eAN0B;AAMrBC,gBANqB;;AAAA,iBAOxBD,GAPwB;AAAA;AAAA;AAAA;;AAAA,8CAOX,CAACA,GAAD,CAPW;;AAAA;AAQ3B,gBAAGC,IAAH,EAAQ;AACN,mBAAQe,CAAR,GAAU,CAAV,EAAYA,IAAEf,KAAKY,MAAnB,EAA0BG,GAA1B,EAA8B;AAC5BuB,wDAAeA,QAAf,IAAyBtC,KAAKe,CAAL,EAAQb,GAAjC;AACD;AACDqC,oDAAaA,MAAb,sBAAwBvC,IAAxB;AACD;;AAb0B;AAKGW,eALH;AAAA;AAAA;;AAAA;AAAA,8CAgBtB,CAACZ,GAAD,EAAMwC,MAAN,EAAcD,QAAd,CAhBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAmBA7C,OAAOC,OAAP,CAAe8C,oBAAf;AAAA,uEAAsC,kBAAOnB,MAAP,EAAegB,UAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChCtC,eADgC,WAC3BF,KAD2B;AAEhCyC,oBAFgC,GAErB,EAFqB;AAGhCC,kBAHgC,GAGvB,EAHuB;AAK5B5B,aAL4B,GAK1B,CAL0B;;AAAA;AAAA,kBAKxBA,IAAE0B,WAAWzB,MALW;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMb,kBAAGpB,MAAMsC,OAAN,CAAc,EAAE5C,SAASmC,MAAX,EAAmBrC,SAASqD,WAAW1B,CAAX,CAA5B,EAAd,CAAH,CANa;;AAAA;AAAA;AAAA;AAMjCZ,eANiC;AAM5BF,iBAN4B;;AAAA,iBAO/BE,GAP+B;AAAA;AAAA;AAAA;;AAAA,8CAOlB,CAACA,GAAD,CAPkB;;AAAA;AAQlC,gBAAGF,KAAH,EAAS;AACPyC,sDAAeA,QAAf,IAAyBzC,MAAMK,GAA/B;AACAqC,oDAAaA,MAAb,IAAqB1C,KAArB;AACD;;AAXiC;AAKJc,eALI;AAAA;AAAA;;AAAA;AAAA,8CAc7B,CAACZ,GAAD,EAAMwC,MAAN,EAAcD,QAAd,CAd6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA","file":"Group.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport to from'../to';\r\n\r\nimport Profile from './Profile';\r\nimport StudentProject from './StudentProject';\r\nimport Card from './Card';\r\nimport Lang from './Lang';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar groupSchema = mongoose.Schema({\r\n  name: {\r\n    type: String\r\n  },\r\n  project: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  members: [ObjectId],\r\n  leader: {\r\n    type: ObjectId\r\n  },\r\n  code: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  }\r\n})\r\n\r\nvar Group = module.exports = mongoose.model('group', groupSchema);\r\n\r\n\r\n\r\nmodule.exports.fetchData = async (group, cb)=>{\r\n\r\n  let err, data;\r\n  let groupData = { group: group._id }\r\n\r\n  let profiles = [];\r\n  [err, data] = await to(Profile.find({ belongTo: group.members }));\r\n  if(err || !data){ cb('failed'); return; }\r\n\r\n  let studentProjects = [];\r\n  const members = group.members;\r\n  [err, data] = await to(StudentProject.find({ project: group.project, student: group.members }));\r\n  if(err || !data){ cb('failed'); return; }\r\n\r\n  studentProjects = [...studentProjects, ...data];\r\n\r\n  let cards = [];\r\n  for(var i=0;i<studentProjects.length;i++){\r\n    [err, data] = await to(Card.find({_id: studentProjects[i].cards}));\r\n    if(err || !data){ cb('failed'); return; }\r\n    cards = [...cards, ...data];\r\n  }\r\n\r\n  let langs = [];\r\n  for(var j=0;j<cards.length;j++){\r\n    [err, data] = await to(Lang.find({_id: cards[j].langs}));\r\n    if(err || !data){ cb('failed'); return; }\r\n    langs = [...langs, ...data];\r\n  }\r\n\r\n  cb('success', groupData, profiles, studentProjects, cards, langs)\r\n\r\n}\r\n\r\nmodule.exports.leaveGroup = async (data, cb)=>{\r\n  let err, group;\r\n\r\n  [err, group] = await to(Group.findOneAndUpdate({code: data.groupCode},\r\n    {$pull:{ members: data.userId }}, { new: true }));\r\n  if(!err && group === null){ cb('failed'); return; };\r\n\r\n  //console.log(group)\r\n  cb('success', group)\r\n}\r\n\r\nmodule.exports.joinGroup = async (data, cb)=>{\r\n  let err, group;\r\n\r\n  [err, group] = await to(Group.findOneAndUpdate({code: data.groupCode},\r\n    {$addToSet:{ members: data.userId }}, { new: true }));\r\n  if(!err && group === null){ cb('failed'); return; };\r\n\r\n  //console.log(group)\r\n  cb('success', group)\r\n}\r\n\r\nmodule.exports.addGroup = async (data, cb)=>{\r\n  let err, group;\r\n\r\n  var newCode = '';\r\n  for(var i=0;i<99;i++){\r\n    newCode = randomString.generate({\r\n      length: 5,\r\n      charset: 'ABCDEFGHJKMNOPQRSTUVWXYZ1234567890'\r\n    });\r\n\r\n    [err, group] = await to(Group.findOne({code: newCode}));\r\n    if(!err && group === null){ break; };\r\n  }\r\n\r\n  [err, group] = await to(Group.findOne({project: data.projectId, leader: data.userId}));\r\n  if(group !== null){ cb('failed', null, group); console.log('group existed'); return; };\r\n\r\n  [err, group] = await to(Group.create({ name: data.groupName, project: data.projectId, members: [data.userId], leader: data.userId, code: newCode }));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  //console.log(group)\r\n  cb('success', group)\r\n}\r\n\r\nmodule.exports.getByProjects = async (projectsId)=>{\r\n  let err, data;\r\n  let groupsId = [];\r\n  let groups = [];\r\n\r\n  for(var i=0;i<projectsId.length;i++){\r\n    [err, data] = await to(Group.find({ project: projectsId[i]}));\r\n    if(err){ return [err]; }\r\n    if(data){\r\n      for(var j=0;j<data.length;j++){\r\n        groupsId = [...groupsId, data[j]._id];\r\n      }\r\n      groups = [...groups, ...data];\r\n    }\r\n  }\r\n\r\n  return [err, groups, groupsId];\r\n}\r\n\r\nmodule.exports.getByUserAndProjects = async (userId, projectsId)=>{\r\n  let err, group;\r\n  let groupsId = [];\r\n  let groups = [];\r\n\r\n  for(var i=0;i<projectsId.length;i++){\r\n    [err, group] = await to(Group.findOne({ members: userId, project: projectsId[i]}));\r\n    if(err){ return [err]; }\r\n    if(group){\r\n      groupsId = [...groupsId, group._id];\r\n      groups = [...groups, group];\r\n    }\r\n  }\r\n\r\n  return [err, groups, groupsId];\r\n}\r\n"]}