{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["ObjectId","require","Types","UserRouter","app","mlanghku","init","mongoose","connect","db","connection","post","req","res","next","userId","body","data","err","updatedUser","User","findOneAndUpdate","id","$set","type","new","console","log","json","result","profiles","admins","getProfilesByUsers","existedUser","findOne","pw","_id","toString","get","email","headers","resetPassword","code","codeType","acquireNewAccountByCode","user","acquireNewAccount","profile","appUser","getUserAndProfile","login","aquireNewAccountByAppAccount","attributes","Log","createLoginLog","schools","courses","subjects","projects","studentProjects","groups","cards","langs","teacherProfiles","Course","getJoined","joinedCourses","Subject","getByCourses","joinedSubjects","Project","getBySubjects","joinedProjects","StudentProject","getByProjects","joinedStudentProjects","Card","getByStudentProjects","joinedCards","Group","getByUserAndProjects","joinedGroups","getTeaching","teachingCourses","slice","reverse","teachingSubjects","teachingProjects","teachingStudentProjects","teachingCards","teachingGroups","School","getByUser","supervisingSchools","getByType","adminUsers","Profile","profilesId","Lang","getByCards","langsId","Router"],"mappings":"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","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\nimport to from '../../to';\r\n\r\nimport Query from '../../models/Query.js';\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Group from '../../models/Group.js';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nimport Log from '../../models/Log.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app, mlanghku){\r\n    super(app);\r\n    this.app = app;\r\n    this.mlanghku = mlanghku;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const mlanghku = this.mlanghku;\r\n    mongoose.connect('mongodb://localhost/sitetracker');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      //console.log(userId);\r\n      let err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      let profiles = [];\r\n      let admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      let err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set: data }, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccountByCode/', (req, res, next)=>{\r\n      const code = req.headers.code;\r\n      const codeType = req.headers.type;\r\n\r\n      User.acquireNewAccountByCode(code, codeType, (result, user)=>{\r\n        console.log(result);\r\n        if(result === 'failed'){ return res.json({result: result})}\r\n        return res.json({ result: result, id: user.id, pw: user.pw });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      //console.log(id + ' ' + pw);\r\n\r\n      let err, data, user, profile, appUser;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){\r\n        [err, appUser] = await mlanghku.login(id, pw);\r\n        if(err){ console.log(err); return res.json({ result: \"failed\" }); }\r\n        [err, user, profile] = await User.aquireNewAccountByAppAccount(appUser.attributes, pw);\r\n      }\r\n      //console.log(user);\r\n      //console.log(profile);\r\n\r\n      Log.createLoginLog(user._id);\r\n\r\n      profiles = [profile];\r\n\r\n      let profiles = [];\r\n      let schools = [];\r\n      let courses = [];\r\n      let subjects = [];\r\n      let projects = [];\r\n      let studentProjects = [];\r\n      let groups = [];\r\n      let cards = [];\r\n      let langs = [];\r\n\r\n      let teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      var joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var joinedStudentProjects;\r\n      [err, data, joinedStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var joinedCards;\r\n      [err, data, joinedCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var joinedGroups;\r\n      [err, data, joinedGroups] = await Group.getByUserAndProjects(user._id, joinedProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var teachingCourses;\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects;\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data.slice(0).reverse());\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingStudentProjects;\r\n      [err, data, teachingStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var teachingCards;\r\n      [err, data, teachingCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var teachingGroups;\r\n      [err, data, teachingGroups] = await Group.getByProjects(teachingProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n      var supervisingSchools;\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers;\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var profilesId;\r\n      [err, data, profilesId] = await Profile.getByStudentProjects(studentProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      var langsId;\r\n      [err, data, langsId] = await Lang.getByCards(cards);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      langs = [...langs, ...data];\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        teachingStudentProjects: teachingStudentProjects,\r\n        joinedStudentProjects: joinedStudentProjects,\r\n\r\n        teachingCards: teachingCards,\r\n        joinedCards: joinedCards,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        groups: groups,\r\n        cards: cards,\r\n        langs: langs\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}