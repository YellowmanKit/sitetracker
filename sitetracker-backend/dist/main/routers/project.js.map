{"version":3,"sources":["../../../src/main/routers/project.js"],"names":["ProjectRouter","app","init","mongoose","connect","db","connection","post","req","res","projectId","body","data","console","log","err","project","studentProjects","card","profile","profiles","rankings","StudentProject","find","json","result","i","length","student","cards","total","featured","j","Card","findById","_id","grade","Profile","findOne","belongTo","push","score","sort","a","b","ranking","list","_projects","Project","splice","projects","next","editedProject","findOneAndUpdate","$set","new","newProject","updatedSubject","create","Subject","subject","$push","cb","Router"],"mappings":"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","file":"project.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nimport to from '../../to';\r\n\r\nimport User from '../../models/User.js';\r\nimport Course from '../../models/Course.js';\r\nimport Project from '../../models/Project.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Card from '../../models/Card.js';\r\nimport Profile from '../../models/Profile.js';\r\n\r\nclass ProjectRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/sitetracker');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/project/getRanking', async(req, res)=>{\r\n      const projectId = req.body.data;\r\n      console.log(projectId);\r\n      let err, project, studentProjects, card, profile;\r\n      var profiles = [];\r\n      var rankings = [];\r\n\r\n      [err, studentProjects] = await to(StudentProject.find({project: projectId}));\r\n      if(err || !studentProjects){ return res.json({ result: 'failed' })}\r\n\r\n      for(var i=0;i<studentProjects.length;i++){\r\n        const student = studentProjects[i].student;\r\n        const cards = studentProjects[i].cards;\r\n        var total = 0;\r\n        var featured = 0;\r\n        for(var j=0;j<cards.length;j++){\r\n          [err, card] = await to(Card.findById(cards[j]._id));\r\n          if(err || !card){ return res.json({ result: 'failed' })}\r\n          total += card.grade === 'passed'? 1: 0;\r\n          total += card.grade === 'featured'? 1: 0;\r\n          featured += card.grade === 'featured'? 1: 0;\r\n        }\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: student}));\r\n        if(err || !profile){ return res.json({ result: 'failed' })}\r\n\r\n        profiles.push(profile);\r\n\r\n        rankings.push({\r\n          student: student,\r\n          total: total,\r\n          featured: featured,\r\n          score: total + featured * 2\r\n        })\r\n      }\r\n\r\n      rankings.sort((a, b)=> {\r\n          return b.score - a.score;\r\n      });\r\n\r\n      //console.log(rankings);\r\n\r\n      return res.json({\r\n        result:'success',\r\n        ranking: rankings,\r\n        profiles: profiles\r\n      })\r\n    });\r\n\r\n    app.post('/project/getMultiple', async(req, res)=>{\r\n      const list = req.body.data;\r\n      //console.log(list);\r\n      let err, project;\r\n      var _projects = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, project] = await to(Project.findById(list[i]));\r\n        if(err){ return res.json({ result: 'failed' })}\r\n        _projects.splice(0,0,project);\r\n      }\r\n      return res.json({\r\n        result:'success',\r\n        projects: _projects\r\n      })\r\n    });\r\n\r\n    app.post('/project/edit', async(req, res, next)=>{\r\n      const project = req.body.data;\r\n      //console.log(data)\r\n      let err, editedProject;\r\n      [err, editedProject] = await to(Project.findOneAndUpdate({_id: project._id},{ $set: project }, { new: true }));\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        editedProject: editedProject\r\n      })\r\n    });\r\n\r\n    app.post('/project/add', async(req, res)=>{\r\n      const project = req.body.data;\r\n      console.log(project);\r\n      let err, newProject, updatedSubject;\r\n      [err, newProject] = await to(Project.create(project))\r\n      if(err){ return res.json({ result: 'failed' })}\r\n\r\n      [err, updatedSubject] = await to(Subject.findOneAndUpdate({_id: project.subject}, { $push: {\r\n        projects: newProject._id\r\n      }}, {new: true}))\r\n      if(err || updatedSubject === null){ cb('failed'); };\r\n\r\n      //Log.create({ user: data.userId, type: 'addProject' });\r\n\r\n      return res.json({\r\n        result:'success',\r\n        newProject: newProject,\r\n        updatedSubject: updatedSubject\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default ProjectRouter;\r\n"]}